



DiffServ Applied to Real-time Transports                    D. York, Ed.
Internet-Draft                                          Internet Society
Intended status: Standards Track                                D. Black
Expires: December 5, 2014                                            EMC
                                                             C. Jennings
                                                                P. Jones
                                                                   Cisco
                                                            June 3, 2014


 Using Differentiated Services (DiffServ) With Real-time Communications
                               Protocols
                      draft-york-dart-dscp-rtp-00

Abstract

   This document describes the interaction between Differentiated
   Services (DiffServ) network quality of service (QoS) functionality
   and real-time network communication, including communication based on
   the Real-time Transport Protocol (RTP).  DiffServ is based on network
   nodes applying different forwarding treatments to packets whose IP
   headers are marked with different DiffServ Code Points (DSCPs).  As a
   result, use of different DSCPs within a single traffic stream may
   cause transport protocol interactions (e.g., due to reordering).  In
   addition, DSCP markings may be changed or removed between the
   traffic's source and destination.  This document covers the
   implications of these DiffServ aspects for real-time network
   communication, including RTCWEB.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 5, 2014.






York, et al.            Expires December 5, 2014                [Page 1]

Internet-Draft           Using DiffServ with RTP               June 2014


Copyright Notice

   Copyright (c) 2014 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   3
   2.  Background  . . . . . . . . . . . . . . . . . . . . . . . . .   3
     2.1.  Differentiated Services (DiffServ)  . . . . . . . . . . .   4
     2.2.  Diffserv PHBs (Per-Hop Behaviors) . . . . . . . . . . . .   6
     2.3.  DiffServ and Transport Protocols  . . . . . . . . . . . .   7
     2.4.  Traffic Classifiers and DSCP Remarking  . . . . . . . . .   8
   3.  Background on Usage of RTP  . . . . . . . . . . . . . . . . .   9
   4.  Recommendations . . . . . . . . . . . . . . . . . . . . . . .  10
   5.  RTCWEB Examples . . . . . . . . . . . . . . . . . . . . . . .  11
   6.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  11
   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  11
   8.  Security Considerations . . . . . . . . . . . . . . . . . . .  11
   9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  11
     9.1.  Normative References  . . . . . . . . . . . . . . . . . .  11
     9.2.  Informative References  . . . . . . . . . . . . . . . . .  11
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  12

1.  Introduction

   This document describes the interactions between Differentiated
   Services (DiffServ) network quality of service (QoS) functionality
   [RFC2475] and real-time network communication, including
   communication based on the Real-time Transport Protocol (RTP).
   DiffServ is based on network nodes applying different forwarding
   treatments to packets whose IP headers are marked with different
   DiffServ Code Points (DSCPs)[RFC2474].  As a result use of different
   DSCPs within a single traffic stream may cause transport protocol
   interactions (e.g., due to reordering).  In addition, DSCP markings
   may be changed or removed between the traffic's source and
   destination.  This document covers the implications of these DiffServ



York, et al.            Expires December 5, 2014                [Page 2]

Internet-Draft           Using DiffServ with RTP               June 2014


   aspects for real-time network communication, including RTCWEB
   traffic.

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

2.  Background

   Real-time communications enables communication in real-time over an
   IP network using various communication modalities, including voice,
   video, text, content sharing, etc.  It is possible to utilize any one
   or more modalities in parallel in order to provide for a richer
   communication experience.

   Perhaps the simplest example of real-time communications is a voice
   phone call placed over the Internet wherein an audio flow is
   transmitted in each direction between two users.  A more complex
   example might be an immersive videoconferencing system that might
   have multiple video screens, multiple cameras, multiple microphones,
   and some means of sharing content.  For such complex systems, there
   may be multiple media flows that may be sent over a single IP address
   and port or transmitted over different IP addresses and ports.

   Generally, the protocol used to send real time media flows is the
   Real-Time Transport Protocol (RTP)[RFC3550].  RTP defines the
   mechanism by which real-time data is transmitted between hosts on the
   Internet.  With most applications, a single media type (e.g., audio)
   is transmitted within a single RTP session.  However, it is possible
   to transmit multiple, distinct media flows over the same RTP session.
   This is referred to as RTP multiplexing.

   Other transport protocols may be used to transmit real-time data or
   near-real-time data, however.  For example, SCTP might be utilized to
   carry application sharing or whiteboarding information as part of an
   overall interaction that includes real time media flows.  These
   additional protocols can be multiplexed with one or more RTP sessions
   via UDP encapsulation, thereby using a single pair of UDP ports.  The
   RTCWEB protocol suite [XXX add reference to rtcweb-transports draft
   here XXX] provides an example that can employ two layers of
   multiplexing:

   1.  Individual media flows are carried in individual RTP packet
       streams that can multiplexed into a single RTP session (for
       RTCWEB,an individual media flow is a MediaStreamTrack, and a




York, et al.            Expires December 5, 2014                [Page 3]

Internet-Draft           Using DiffServ with RTP               June 2014


       MediaStream man contain multiple MediaStreamTracks [XXX add
       reference to W3C mediacapture-streams document here XXX]); and

   2.  One or more RTP session(s) multiplexed can be multiplexed with
       other transport protocols via UDP encapsulation over a common
       pair of UDP ports.  The resulting unidirectional UDP flow is
       uniquely identified by a 5-tuple, i.e., a combination of two IP
       addresses (source and destination), two UDP ports (source and
       destination), and the use of the UDP protocol.

   The number of media and other transport flows in an overall real-time
   interaction can be surprisingly large.  While a voice flow and a
   video flow are obvious, there could be separate media flows for each
   of the cameras or microphones on a videoconferencing system.  For
   each of those video flows, and especially for layered video codecs,
   there might be flows that carry spatial and temporal data separately
   from the base layer.  There might also be a flow that provides
   protection to a media flow, using techniques like Forward Error
   Correction or redundancy.  Still another example for simulcast
   transmissions, such as where a video flow is transmitted at high
   resolution and low resolution at the same time.  In this case, a
   media processing function might choose to send one or the other or
   both downstream to a receiver based on bandwidth availability or who
   the active speaker is in a multipoint conference.  Lastly, a
   transmitter might send the media flow using multiple encodings (e.g.,
   VP8 in parallel with H.264), such as to allow a media processing
   function to select a media encoding that best matches the
   capabilities of the receiver.

   [XXX DLB: Dan or Paul need to check that all the flow examples make
   sense as individual RTP packet streams.  XXX]

2.1.  Differentiated Services (DiffServ)

   The DiffServ architecture is intended to enable scalable service
   discrimination in the Internet without the need for per-flow state
   and signaling at every hop or node.  A variety of services may be
   built from a small, well-defined set of building blocks that are
   deployed in network nodes.  The services may be either end-to-end or
   intra-domain; they include both those that can satisfy quantitative
   performance requirements (e.g., peak bandwidth) and those based on
   relative performance (e.g., "class" differentiation).  Services can
   be constructed by a combination of:

   o  classifying traffic and setting bits in an IP header field at
      network boundaries or hosts,





York, et al.            Expires December 5, 2014                [Page 4]

Internet-Draft           Using DiffServ with RTP               June 2014


   o  using those bits to determine how packets are forwarded by the
      nodes inside the network, and

   o  conditioning the marked packets (e.g., metering, marking, shaping,
      policing) at network boundaries in accordance with the
      requirements or rules of each service.

   The requirements or rules of each service are set through
   administrative policy mechanisms.  A network node that supports
   DiffServ includes a classifier that selects packets based on the
   value of the DS field in IP headers, along with buffer management and
   packet scheduling mechanisms capable of delivering the specific
   packet forwarding treatment indicated by the DS field value.  Setting
   of the DS field and fine-grain conditioning of marked packets need
   only be performed at network boundaries; internal network nodes
   operate on traffic aggregates that share a DS field value or in some
   cases, a small set of related values.

   The DiffServ architecture[RFC2475] is comprised of three primary
   functional elements that are implemented in network nodes:

   1.  a small set of per-hop forwarding treatments or behaviors (per-
       hop behaviors, PHBs),

   2.  packet classification functions, and

   3.  traffic conditioning functions including metering, marking,
       shaping, and policing.

   The architecture maintains distinctions among:

   o  the service provided to a traffic aggregate,

   o  the conditioning functions and per-hop behaviors used to realize
      services,

   o  the DS field value (DS codepoint, or DSCP) used to mark packets to
      select a per-hop behavior, and

   o  the particular implementation mechanisms that realize a per-hop
      behavior.

   This document focuses on PHBs and the usage of DSCPs to obtain those
   behaviors.  In a network node's forwarding path, the DSCP in a field
   in the IP packet header is mapped to a particular forwarding
   treatment, or per-hop behavior (PHB) that specifies the forwarding
   treatment.




York, et al.            Expires December 5, 2014                [Page 5]

Internet-Draft           Using DiffServ with RTP               June 2014


   A per-hop behavior (PHB) is a description of the externally
   observable forwarding behavior of a network node applied to network
   traffic marked with the corresponding DSCP for that network.  In this
   context, "forwarding behavior" is a general - for example, if only
   one DSCP is used for all traffic on a link, the observable forwarding
   behavior (e.g., loss, delay, jitter) will often depend only on the
   relative loading of the link.  To obtain useful behavioral multiple
   traffic subsets are marked with different DSCPs for different PHBs to
   which node resources such as buffer space and bandwidth are
   allocated.  PHBs provide the framework for a DiffServ network node to
   allocates resources to traffic subsets, and useful differentiated
   services are constructed top of this basic hop-by-hop (per-node)
   resource allocation mechanism.

   The codepoints (DCSPs) may be chosen from a set of mandatory values
   (the class selector codepoints), from a set of recommended values
   defined in PHB specifications, or may have purely local meaning.  The
   mandatory DSCPs are the class selector code points as specified in
   [RFC2474].  The class selector codepoints (CS0-CS7) extend the
   deprecated IP Precedence field in the IPv4 header; three bits are
   added, so that the class selector DSCPs are of the form 'xxx000'.
   The all-zero DSCP ('00000') designates a Default PHB that provides
   best-effort forwarding behavior and the remaining class selector code
   points were originally specified to provide relatively better per-
   hop-forwarding behavior in increasing numerical order, but:

   o  There is no requirement that any two adjacent class selector
      codepoints provide different PHBs; adjacent class selector
      codepoints may use the same pools of resources on each network
      node in some networks.

   o  CS1 ('001000') was subsequently recommended for "less than best
      effort" service when such a service is offered by a network
      [RFC3662].  Not all networks offer such a service.

   Applications and traffic sources in general cannot rely upon
   different class selector codepoints providing differentiated services
   or upon the presence of a "less than best effort" service that is
   selected by the CS1 DSCP.

2.2.  Diffserv PHBs (Per-Hop Behaviors)

   Although Differentiated Services is a general architecture that may
   be used to implement a variety of services, three fundamental
   forwarding behaviors (PHBs) have been defined and characterized for
   general use.  These are:





York, et al.            Expires December 5, 2014                [Page 6]

Internet-Draft           Using DiffServ with RTP               June 2014


   1.  Default Forwarding (DF) for elastic traffic [RFC2474].  The
       Default PHB is always selected by the all-zero DSCP.

   2.  Assured Forwarding (AF) [RFC2597] to provide differentiated
       service to elastic traffic.  Each instance of the AF behavior
       consists of three PHBs that differ only in drop precedence, e.g.,
       AF11, AF12 and AF13; such a set of three AF PHBs is referred to
       as an AF class, e.g., AF1x.  There are four defined AF classes,
       AF1x through AF4x.

   3.  Expedited Forwarding (EF) [RFC3246]intended for inelastic
       traffic.  Beyond the basic EF PHB, the VOICE-ADMIT PHB [RFC5865]
       is an admission controlled variant of the EF PHB.

2.3.  DiffServ and Transport Protocols

   [Editor's note: This section is centered on TCP, UDP, and SCTP.  It
   will need some generalization to include other important transport
   protocols - DCCP is a likely one to include, although it is not
   necessary to include every known transport protocol.]

   Transport protocols provide data communication behaviors beyond those
   possible at the IP layer.  An important example is that TCP provides
   reliable in-order delivery of a data stream with congestion control.
   SCTP provides additional properties such as preservation of message
   boundaries, and the ability to avoid head-of-line blocking that may
   occur with TCP.  In contrast, UDP is a basic unreliable datagram
   protocol whose primary functionality is port-based multiplexing and
   demultiplexing on top of IP.

   Transport protocols that provide in-order delivery and especially
   reliable in-order delivery for traffic or traffic subsets (e.g., TCP,
   SCTP) are sensitive to network reordering of traffic.  At a minimum,
   when a protocol that provides reliable in-order delivery does receive
   a packet other than the next expected packet for an ordered
   connection or stream, it cannot deliver that subsequent packet.  In
   this situation, such protocols usually assume that the expected
   packet has been lost and respond with a retransmission request for
   that packet.  In addition, congestion control functionality in
   transport protocols usually infers congestion when packets are lost,
   creating an additional sensitivity to significant reordering - such
   reordering may be (mis-)interpreted as indicating congestion-caused
   packet loss, causing a reduction in transmission rate.  This remains
   true even when ECN [RFC3168] is in use, as extreme congestion may
   still cause packet losses, which transport protocols react to as
   indicating congestion.  Congestion control is an important aspect of
   the Internet architecture, see [RFC2914] for further discussion.




York, et al.            Expires December 5, 2014                [Page 7]

Internet-Draft           Using DiffServ with RTP               June 2014


   In general, marking traffic with different DSCPs result in different
   PHBs being applied at network nodes, making reordering possible due
   to use of different pools of forwarding resources for each PHB.  The
   major exception is that the reordering is prohibited within each AF
   class (e.g., AF1x); this is because the three PHBs in an AF class are
   required to differ solely in drop precedence.  Reordering within a
   PHB or AF class may occur for other transient reasons (e.g., route
   flap).  UDP is the primary transport protocol that is not sensitive
   to reordering in the network, because it does not provide reliable
   delivery, in-order delivery or congestion control.

2.4.  Traffic Classifiers and DSCP Remarking

   [David: Main points to make here: Network core uses BA Classifier
   (DSCP only).  Network edge uses MF classifier, typically 5-tuple,
   although RFC 2475 allows DSCP to be a classifier input.  Remarking
   occurs on aggregate/flows/packets selected by classifier.  Can lose
   differentiation at any point (backbone networks often carry a small
   number of behavioral aggregates).  Using multiple DSCPs within a
   5-tuple is asking for an MF classifier to remove that
   differentiation.]

   DSCP markings are not end-to-end in general.  Each network is free to
   make its own decisions about what PHBs to use and what DSCP
   corresponds to each PHB.  While every PHB specification includes a
   recommended DSCP, and RFC 4594 [RFC4594] recommends their end-to-end
   usage, beyond the class selector codepoints, there is no requirement
   that every network support any other PHBs or use any DSCPs.  When
   DiffServ is used, the edge or boundary nodes of a are responsible for
   ensuring that all traffic entering a network conforms to that
   network's policies for DSCP and PHB usage; this network ingress
   traffic conditioning is a function of the classification, marking and
   related traffic conditioning functionality at network boundaries
   mentioned in Section 2.1 and is an important element of the DiffServ
   architecture, see [RFC2475].  Hence DSCP remarking is possible at any
   network boundary, including the first network node that traffic sent
   by a host encounters.

   The traffic classifiers that are used for remarking often do not look
   beyond the traffic's 5-tuple (source and destination IP addresses,
   transport protocol, source and destination ports).  This is the case
   even though the definition of MF classifiers (Multi-Flow classifiers)
   in RFC 2475[RFC2475] allows arbitrary fields as input - in practice,
   the DSCP is typically not one of those fields.  As a result, when
   multiple DSCPs are used for network traffic that shares a 5-tuple,
   remarking at a network boundary may result in all of the traffic
   being forwarded with a single DSCP, removing any differentiation
   within the 5-tuple beyond the point at which this remarking occurs.



York, et al.            Expires December 5, 2014                [Page 8]

Internet-Draft           Using DiffServ with RTP               June 2014


   In addition, remarking may remove application-level distinctions in
   forwarding behavior - e.g., if multiple PHBs within an AF class are
   used to distinguish different types of frames within a video flow,
   token-bucket-based remarkers operating in Color-Blind mode (see
   [RFC2697] and [RFC2698] for examples) may remark solely based on flow
   rate and burst behavior, removing the drop precedence distinctions
   specified by the source.

   Backbone and other carrier networks may employ a small number of
   DSCPs (e.g., less than half a dozen) in order to manage a small
   number of traffic aggregates; hosts that use a much larger number of
   DSCPs may find that much of the intended differentiation is removed
   by such networks.

   [Editor's note: Need to double-check preceding paragraph with network
   operators.]

3.  Background on Usage of RTP

   Section2 explains how media flows can be multiplexed over RTP
   sessions which can in turn be multiplexed over UDP with other RTP
   sessions and flows generated by other transport protocols.  This
   section provides background on why this level of media flow
   multiplexing is desirable.  The rationale in this section applies
   both to multiplexing of media flows in RTP sessions and multiplexing
   of one or more RTP sessions with traffic from other transport
   protocols via UDP encapsulation.

   Multiplexing reduces the number of ports utilized for real-time and
   related communication in an overall interaction.  While a single
   endpoint might have plenty of ports available for communication,
   these media flows are often traverse points in the network that are
   constrained on the number of available ports.  A good example is a
   NAT/FW device sitting at the network edge.  As the number of
   simultaneous protocol sessions increases, so does the burden placed
   on these devices in order to provide port mapping.

   Another reason for multiplexing is to help reduce the time required
   to establish bi-directional traffic flows.  Since any two
   communicating users might be situated behind different NAT/FW
   devices, it is necessary to employ techniques like STUN/ICE/TURN in
   order to get traffic to flow between the two devices.  Performing the
   tasks required of STUN/ICE/TURN take time and requiring an endpoint
   to perform these tasks for several flows can increase the time
   required.  While tasks for different flows can be performed in
   parallel, it is nonetheless necessary for applications to wait for
   all flows to be opened before communication between to users can
   begin.  Reducing the number of STUN/ICE/TURN steps reduces the



York, et al.            Expires December 5, 2014                [Page 9]

Internet-Draft           Using DiffServ with RTP               June 2014


   probability of losing a packet and introducing delay in setting up a
   communication session.  Further, reducing the number of STUN/ICE/TURN
   tasks means that there is a lower burden placed on the STUN and TURN
   servers.  [XXX need STUN/TURN/ICE references XXX]

   Multiplexing may reduce the complexity and resulting load on an
   endpoint.  A single instance of STUN/ICE/TURN is simpler to execute
   and manage than multiple instances STUN/ICE/TURN operations happening
   in parallel, as the latter require synchronization and create more
   complex failure situations that have to be cleaned up by additional
   code.

   [DY: Potential drafts that seem like they would be useful to
   reference include:

   - http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-
   negotiation-05

   - http://tools.ietf.org/html/draft-ietf-rtcweb-rtp-usage-14

   - http://tools.ietf.org/html/draft-ietf-rtcweb-transports-02

   ]

4.  Recommendations

   The only use of multiple standardized PHBs and DSCPs that does not
   cause reordering is within a single AF class.

   [Editor's note: The following are preliminary and subject to change.
   Please don't get seriously riled up, as this is a -00 draft!]
   Outline:

   o  SHOULD NOT use different PHBs and DSCPs that may cause reordering
      within a single media flow.  If this is not done, significant
      network reordering may overwhelm implementation assumptions about
      limits on reordering r(e.g., available buffering) resulting in
      poor user experiences and the like.

   o  SHOULD NOT use different PHBs and DSCPs that may cause reordering
      for an ordered stream within a reliable transport protocol (e.g.,
      SCTP) or an ordered session for reliable transport protocols that
      do not support ordered streams within a single session (e.g.,
      SCTP), Receivers for such protocols interpret reordering as
      indicating loss of out-of-order packets causing undesired
      retransmission requests, and will infer congestion from
      significant reordering, causing throughput reduction.




York, et al.            Expires December 5, 2014               [Page 10]

Internet-Draft           Using DiffServ with RTP               June 2014


   o  MAY use different PHBs and DSCPs that cause reordering within a
      single UDP 5-tuple, subject to the above constraints.  The service
      differentiation provided by such usage is unreliable, as it may be
      removed at network boundaries for the reasons described in
      Section 2.4 above.

   o  SHOULD NOT rely on end-to-end preservation of DSCPs or of drop
      precedence distinctions within an AF class, see Section 2.4 above.

5.  RTCWEB Examples

   (This section will provide examples of DiffServ/DSCP limitations with
   regard to RTCWEB.)

6.  Acknowledgements

   This document is the result of many conversations that have occurred
   within multiple RAI and TRANSPORT area working groups.  Thanks for
   review and text from James Polk.

7.  IANA Considerations

   This document includes no request to IANA.

8.  Security Considerations

   (Need to understand if there are any security considerations to
   include.)

   [DLB: Multiplexing of streams onto same UDP 5-tuple may not be
   expected by network operational/monitoring/security tools, making it
   easier to hide things?]

9.  References

9.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

9.2.  Informative References

   [RFC2474]  Nichols, K., Blake, S., Baker, F., and D. Black,
              "Definition of the Differentiated Services Field (DS
              Field) in the IPv4 and IPv6 Headers", RFC 2474, December
              1998.





York, et al.            Expires December 5, 2014               [Page 11]

Internet-Draft           Using DiffServ with RTP               June 2014


   [RFC2475]  Blake, S., Black, D., Carlson, M., Davies, E., Wang, Z.,
              and W. Weiss, "An Architecture for Differentiated
              Services", RFC 2475, December 1998.

   [RFC2597]  Heinanen, J., Baker, F., Weiss, W., and J. Wroclawski,
              "Assured Forwarding PHB Group", RFC 2597, June 1999.

   [RFC2697]  Heinanen, J. and R. Guerin, "A Single Rate Three Color
              Marker", RFC 2697, September 1999.

   [RFC2698]  Heinanen, J. and R. Guerin, "A Two Rate Three Color
              Marker", RFC 2698, September 1999.

   [RFC2914]  Floyd, S., "Congestion Control Principles", BCP 41, RFC
              2914, September 2000.

   [RFC3168]  Ramakrishnan, K., Floyd, S., and D. Black, "The Addition
              of Explicit Congestion Notification (ECN) to IP", RFC
              3168, September 2001.

   [RFC3246]  Davie, B., Charny, A., Bennet, J., Benson, K., Le Boudec,
              J., Courtney, W., Davari, S., Firoiu, V., and D.
              Stiliadis, "An Expedited Forwarding PHB (Per-Hop
              Behavior)", RFC 3246, March 2002.

   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.
              Jacobson, "RTP: A Transport Protocol for Real-Time
              Applications", STD 64, RFC 3550, July 2003.

   [RFC3662]  Bless, R., Nichols, K., and K. Wehrle, "A Lower Effort
              Per-Domain Behavior (PDB) for Differentiated Services",
              RFC 3662, December 2003.

   [RFC4594]  Babiarz, J., Chan, K., and F. Baker, "Configuration
              Guidelines for DiffServ Service Classes", RFC 4594, August
              2006.

   [RFC5865]  Baker, F., Polk, J., and M. Dolly, "A Differentiated
              Services Code Point (DSCP) for Capacity-Admitted Traffic",
              RFC 5865, May 2010.

Authors' Addresses









York, et al.            Expires December 5, 2014               [Page 12]

Internet-Draft           Using DiffServ with RTP               June 2014


   Dan York (editor)
   Internet Society
   Keene, N.H.
   USA

   Phone: +1-802-735-1624
   Email: dyork@lodestar2.com


   David Black
   EMC
   176 South Street
   Hopkinton, MA  01748
   USA

   Phone: +1 508 293-7953
   Email: david.black@emc.com


   Cullen Jennings
   Cisco
   170 West Tasman Drive
   MS: SJC-21/2
   San Jose, CA  95134
   USA

   Phone: +1 408 421-9990
   Email: fluffy@cisco.com


   Paul Jones
   Cisco



















York, et al.            Expires December 5, 2014               [Page 13]
